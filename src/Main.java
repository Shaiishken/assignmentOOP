import Controllers.AuthController;
import Controllers.CarController;
import Controllers.EmployeeController;
import Controllers.MachineController;
import Controllers.OrderController;
import model.OrderItem;
import model.User;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import config.DatabaseConnection;
import config.DatabaseInitializer;

public class Main {
    private static final Scanner scanner = new Scanner(System.in);
    private static final CarController carController = new CarController();
    private static final EmployeeController employeeController = new EmployeeController();
    private static final MachineController machineController = new MachineController();
    private static final AuthController authController = new AuthController();
    private static final OrderController orderController = new OrderController();
    private static User currentUser = null;

    public static void main(String[] args) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        DatabaseInitializer.initializeDatabase();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        try (Connection connection = DatabaseConnection.getInstance().getConnection()) {
            if (connection != null && !connection.isClosed()) {
                System.out.println("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
            } else {
                System.out.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.");
                return;
            }
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
            return;
        }

        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        while (true) {
            if (currentUser == null) {
                System.out.println("\nüöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Car Factory!");
                System.out.println("1Ô∏è‚É£ - –í—Ö–æ–¥");
                System.out.println("2Ô∏è‚É£ - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è");
                System.out.println("0Ô∏è‚É£ - –í—ã—Ö–æ–¥");
                System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

                int choice = scanner.nextInt();
                scanner.nextLine();  // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞

                switch (choice) {
                    case 1:
                        login();
                        break;
                    case 2:
                        register();
                        break;
                    case 0:
                        System.out.println("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...");
                        scanner.close();
                        return;
                    default:
                        System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
            } else {
                if ("ADMIN".equals(currentUser.getRole())) {
                    adminMenu();
                } else {
                    userMenu();
                }
            }
        }
    }

    private static void login() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        String username = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
        String password = scanner.nextLine();

        currentUser = authController.login(username, password);
    }

    private static void register() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        String username = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
        String password = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å (ADMIN/CUSTOMER): ");
        String role = scanner.nextLine();

        authController.register(username, password, role);
    }

    private static void adminMenu() {
        while (true) {
            System.out.println("\nüëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:");
            System.out.println("1Ô∏è‚É£ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏");
            System.out.println("2Ô∏è‚É£ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏");
            System.out.println("3Ô∏è‚É£ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏");
            System.out.println("4Ô∏è‚É£ - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
            System.out.println("5Ô∏è‚É£ - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("6Ô∏è‚É£ - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("0Ô∏è‚É£ - –í—ã—Ö–æ–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            int choice = scanner.nextInt();
            scanner.nextLine();  // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞

            switch (choice) {
                case 1:
                    manageCars();
                    break;
                case 2:
                    manageEmployees();
                    break;
                case 3:
                    manageMachines();
                    break;
                case 4:
                    authController.viewAllUsers();
                    break;
                case 5:
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
                    String usernameToDelete = scanner.nextLine();
                    authController.deleteUser(usernameToDelete);
                    break;
                case 6:
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
                    String usernameToUpdate = scanner.nextLine();
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å (ADMIN/CUSTOMER): ");
                    String newRole = scanner.nextLine();
                    authController.updateUserRole(usernameToUpdate, newRole);
                    break;
                case 0:
                    currentUser = null;
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void userMenu() {
        while (true) {
            System.out.println("\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:");
            System.out.println("1Ô∏è‚É£ - –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π");
            System.out.println("2Ô∏è‚É£ - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤");
            System.out.println("3Ô∏è‚É£ - –ó–∞–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å");
            System.out.println("0Ô∏è‚É£ - –í—ã—Ö–æ–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            int choice = scanner.nextInt();
            scanner.nextLine();  // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞

            switch (choice) {
                case 1:
                    carController.listAllCars();
                    break;
                case 2:
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
                    int userId = scanner.nextInt();
                    scanner.nextLine();
                    orderController.viewOrderHistory(userId);
                    break;
                case 3:
                    orderCar();
                    break;
                case 0:
                    currentUser = null;
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void orderCar() {
        List<OrderItem> orderItems = new ArrayList<>();
        while (true) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∏–ª–∏ 0 –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ");
            int carId = scanner.nextInt();
            scanner.nextLine();  // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞

            if (carId == 0) {
                break;
            }

            System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ");
            int quantity = scanner.nextInt();
            scanner.nextLine();  // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞

            System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: ");
            double price = scanner.nextDouble();
            scanner.nextLine();  // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞

            orderItems.add(new OrderItem(carId, quantity, price));
        }

        if (!orderItems.isEmpty()) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
            int userId = scanner.nextInt();
            scanner.nextLine();  // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞

            boolean success = orderController.createOrder(userId, orderItems);
            if (success) {
                System.out.println("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.");
            } else {
                System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
            }
        } else {
            System.out.println("‚ùå –ù–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞.");
        }
    }

    private static void manageCars() {
        while (true) {
            System.out.println("\nüöò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏:");
            System.out.println("1Ô∏è‚É£ - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏");
            System.out.println("2Ô∏è‚É£ - –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å");
            System.out.println("3Ô∏è‚É£ - –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å");
            System.out.println("4Ô∏è‚É£ - –ù–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ ID");
            System.out.println("0Ô∏è‚É£ - –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    carController.listAllCars();
                    break;
                case 2:
                    addCar();
                    break;
                case 3:
                    deleteCar();
                    break;
                case 4:
                    getCarById();
                    break;
                case 0:
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void addCar() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ");
        String model = scanner.nextLine();
        if (model == null || model.trim().isEmpty()) {
            System.out.println("‚ùå –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.");
            return;
        }

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (SUV, Sedan, Truck): ");
        String category = scanner.nextLine();
        if (!"SUV".equals(category) && !"Sedan".equals(category) && !"Truck".equals(category)) {
            System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: SUV, Sedan, Truck.");
            return;
        }

        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É: ");
        double price = scanner.nextDouble();
        if (price <= 0) {
            System.out.println("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.");
            return;
        }

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞: ");
        int year = scanner.nextInt();
        scanner.nextLine(); // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
        if (year < 1900 || year > java.time.Year.now().getValue()) {
            System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞.");
            return;
        }

        carController.addCar(model, category, price, year);
        System.out.println("‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.");
    }

    private static void deleteCar() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
        int id = scanner.nextInt();
        scanner.nextLine();

        carController.deleteCar(id);
    }

    private static void getCarById() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ");
        int id = scanner.nextInt();
        scanner.nextLine();

        carController.getCarById(id);
    }

    private static void manageEmployees() {
        while (true) {
            System.out.println("\nüë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏:");
            System.out.println("1Ô∏è‚É£ - –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞");
            System.out.println("2Ô∏è‚É£ - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤");
            System.out.println("0Ô∏è‚É£ - –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    addEmployee();
                    break;
                case 2:
                    employeeController.getAllEmployees().forEach(employee ->
                            System.out.println("ID: " + employee.getId() + ", –ò–º—è: " + employee.getName() + ", –î–æ–ª–∂–Ω–æ—Å—Ç—å: " + employee.getPosition() + ", –ó–∞—Ä–ø–ª–∞—Ç–∞: " + employee.getSalary())
                    );
                    break;
                case 0:
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void addEmployee() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ");
        String name = scanner.nextLine();
        if (name == null || name.trim().isEmpty()) {
            System.out.println("‚ùå –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: ");
        String position = scanner.nextLine();
        if (position == null || position.trim().isEmpty()) {
            System.out.println("‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.");
            return;
        }

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É: ");
        double salary = scanner.nextDouble();
        scanner.nextLine(); // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
        if (salary <= 0) {
            System.out.println("‚ùå –ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.");
            return;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º double –≤ BigDecimal
        BigDecimal salaryBigDecimal = BigDecimal.valueOf(salary);

        employeeController.addEmployee(name, position, salaryBigDecimal);
        System.out.println("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.");
    }

    private static void manageMachines() {
        while (true) {
            System.out.println("\n‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏:");
            System.out.println("1Ô∏è‚É£ - –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É");
            System.out.println("2Ô∏è‚É£ - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞—à–∏–Ω—ã");
            System.out.println("0Ô∏è‚É£ - –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    addMachine();
                    break;
                case 2:
                    machineController.getAllMachines().forEach(machine ->
                            System.out.println("ID: " + machine.getId() + ", –ù–∞–∑–≤–∞–Ω–∏–µ: " + machine.getName() + ", –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + machine.getCapacity() + ", –°—Ç–∞—Ç—É—Å: " + machine.getStatus())
                    );
                    break;
                case 0:
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void addMachine() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã: ");
        String name = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–∞–≤—Ç–æ/–¥–µ–Ω—å): ");
        int capacity = scanner.nextInt();
        scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å (ACTIVE/INACTIVE/MAINTENANCE): ");
        String status = scanner.nextLine();

        machineController.addMachine(name, capacity, status);
    }
}
