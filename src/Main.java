import Controllers.CarController;
import Controllers.FactoryController;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Scanner;

import config.DatabaseConnection;
import config.DatabaseInitializer;
public class Main {
    private static final Scanner scanner = new Scanner(System.in);
    private static final CarController carController = new CarController();
    private static final FactoryController factoryController = new FactoryController();

    public static void main(String[] args) {
        try (Connection connection = DatabaseConnection.getConnection()) {
            if (connection != null) {
                System.out.println("‚úÖ Database connection is active.");
            } else {
                System.out.println("‚ùå Failed to establish database connection.");
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Database connection error: " + e.getMessage());
        }
        DatabaseInitializer.initializeDatabase();
        while (true) {


            System.out.println("\nüöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Car Factory!");
            System.out.println("1Ô∏è‚É£ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏");
            System.out.println("2Ô∏è‚É£ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏");
            System.out.println("3Ô∏è‚É£ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏");
            System.out.println("0Ô∏è‚É£ - –í—ã—Ö–æ–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            int choice = scanner.nextInt();
            scanner.nextLine();  // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞

            switch (choice) {
                case 1:
                    manageCars();
                    break;
                case 2:
                    manageEmployees();
                    break;
                case 3:
                    manageMachines();
                    break;
                case 0:
                    System.out.println("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...");
                    scanner.close();
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
    }

    private static void manageCars() {
        while (true) {
            System.out.println("\nüöò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏:");
            System.out.println("1Ô∏è‚É£ - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏");
            System.out.println("2Ô∏è‚É£ - –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å");
            System.out.println("3Ô∏è‚É£ - –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å");
            System.out.println("4Ô∏è‚É£ - –ù–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ ID");
            System.out.println("0Ô∏è‚É£ - –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    carController.listAllCars();
                    break;
                case 2:
                    addCar();
                    break;
                case 3:
                    deleteCar();
                    break;
                case 4:
                    getCarById();
                    break;
                case 0:
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void addCar() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ");
        String model = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ");
        String category = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É: ");
        double price = scanner.nextDouble();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞: ");
        int year = scanner.nextInt();
        scanner.nextLine();

        carController.addCar(model, category, price, year);
    }

    private static void deleteCar() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
        int id = scanner.nextInt();
        scanner.nextLine();

        carController.deleteCar(id);
    }

    private static void getCarById() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ");
        int id = scanner.nextInt();
        scanner.nextLine();

        carController.getCarById(id);
    }

    private static void manageEmployees() {
        while (true) {
            System.out.println("\nüë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏:");
            System.out.println("1Ô∏è‚É£ - –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞");
            System.out.println("0Ô∏è‚É£ - –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    addEmployee();
                    break;
                case 0:
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void addEmployee() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ");
        String name = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: ");
        String position = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É: ");
        BigDecimal salary = scanner.nextBigDecimal();
        scanner.nextLine();

        factoryController.addEmployee(name, position, salary);
    }

    private static void manageMachines() {
        while (true) {
            System.out.println("\n‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏:");
            System.out.println("1Ô∏è‚É£ - –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É");
            System.out.println("0Ô∏è‚É£ - –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    addMachine();
                    break;
                case 0:
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void addMachine() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã: ");
        String name = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–∞–≤—Ç–æ/–¥–µ–Ω—å): ");
        int capacity = scanner.nextInt();
        scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å (ACTIVE/INACTIVE/MAINTENANCE): ");
        String status = scanner.nextLine();

        factoryController.addMachine(name, capacity, status);
    }
}
